use cosmwasm_schema::{cw_serde};

/// Message type for `instantiate` entry_point
#[cw_serde]
pub struct InstantiateMsg {
    /// Name of the NFT contract
    pub name: String,
    /// Symbol of the NFT contract
    pub symbol: String,

    /// The minter is the only one who can create new NFTs.
    /// This is designed for a base NFT that is controlled by an external program
    /// or contract. You will likely replace this with custom logic in custom NFTs
    pub minter: String,
}

/// Message type for `execute` entry_point
#[cw_serde]
pub enum ExecuteMsg {
    
    /// @notice Creates and transfers the ownership of an ABT from the
    ///  transaction's `msg.sender` to `address to`.
    /// @dev Throws unless `bytes signature` represents an EIP-2098 Compact
    ///  Signature of the EIP-712 structured data hash
    ///  `Agreement(address active,address passive,string tokenURI)` expressing
    ///  `address to`'s explicit agreement to be publicly associated with
    ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be
    ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a
    ///  `uint256`. If `bytes signature` is empty or `address to` is a contract,
    ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must
    ///  be made to `address to`. A successful execution must result in the
    ///  `event Transfer(msg.sender, to, tokenId)`. Once an ABT exists as an
    ///  `uint256 tokenId` in the contract, `function give(...)` must throw.
    /// @param to The receiver of the ABT.
    /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.
    /// @param signature A EIP-2098-compatible Compact Signature of the EIP-712
    ///  structured data hash
    ///  `Agreement(address active,address passive,string tokenURI)` signed by
    ///  `address to`.
    /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`
    ///  EIP-712 structured data hash to a `uint256`.
    Give{
        to: String,
        uri: String,
        signature: String,
    },

    /// @notice Creates and transfers the ownership of an ABT from an
    /// `address from` to the transaction's `msg.sender`.
    /// @dev Throws unless `bytes signature` represents an EIP-2098 Compact
    ///  Signature of the EIP-712 structured data hash
    ///  `Agreement(address active,address passive,string tokenURI)` expressing
    ///  `address from`'s explicit agreement to be publicly associated with
    ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be
    ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a
    ///  `uint256`. If `bytes signature` is empty or `address from` is a contract,
    ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must
    ///  be made to `address from`. A successful execution must result in the
    ///  emission of an `event Transfer(from, msg.sender, tokenId)`. Once an ABT
    ///  exists as an `uint256 tokenId` in the contract, `function take(...)` must
    ///  throw.
    /// @param from The origin of the ABT.
    /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.
    /// @param signature A EIP-2098-compatible Compact Signature of the EIP-712
    ///  structured data hash
    ///  `Agreement(address active,address passive,string tokenURI)` signed by
    ///  `address from`.
    /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`
    ///  EIP-712 structured data hash to a `uint256`.
    Take{
        from: String,
        uri: String,
        signature: String,
    },

    /// @notice Removes the `String token_id` from an account.
    /// @dev Must emit a `event Transfer` with the `address to` field pointing to
    ///  the zero address.
    /// @param token_id The identifier for an ABT.
    UnEquip{ nft_id: String },

    /// @notice Removes the `uint256 tokenId` from an account. At any time, an
    ///  ABT receiver must be able to disassociate themselves from an ABT
    ///  publicly through calling this function. After successfully executing this
    ///  function, given the parameters for calling `function give` or
    ///  `function take` a token must be re-equipable.
    /// @dev Must emit a `event Transfer` with the `address to` field pointing to
    ///  the zero address.
    /// @param tokenId The identifier for an ABT.
    Equip{ nft_id: String },


    /// The additional messages for this contract

    /// @notice un admit the `String token_id` from account.
    UnAdmit{ nft_id: String },

    /// @notice Mint a token to user
    Mint{
        /// Unique ID of the NFT
        nft_id: String,
        /// The owner of the newly minter NFT
        owner: String,
        /// Universal resource identifier for this NFT
        /// Should point to a JSON file that conforms to the ERC721
        /// Metadata JSON Schema
        nft_uri: String,
    },
}

/// Message type for `migrate` entry_point
#[cw_serde]
pub enum MigrateMsg {}

/// Message type for `query` entry_point
#[cw_serde]
pub enum QueryMsg {
    /// With MetaData Extension.
    /// Returns top-level metadata about the contract: `ContractInfoResponse`
    ContractInfo {},

    /// message to retrieve the name of the contract in the metadata
    Name {},

    /// message to retrieve the symbol of the contract in the metadata
    Symbol {},

    /// Total number of nfts issued
    NumNfts {},

    /// Return the owner of the given nft, error if nft does not exist
    /// Return type: OwnerOfResponse
    OwnerOf {
        nft_id: String,
    },

    /// With MetaData Extension.
    /// Returns metadata about one particular nft, based on *ERC721 Metadata JSON Schema*
    /// but directly from the contract: `NftInfoResponse`
    NftInfo {
        nft_id: String,
    },

    /// With MetaData Extension.
    /// Returns the list of all nft of a owner with the equipment status is true.
    /// Return type: `AllNftOfResponse`
    AllEquippedNftOf {
        owner: String,
    },

    /// With MetaData Extension.
    /// Returns the list of all nft of a owner with the equipment status is false.
    /// Return type: `AllNftOfResponse`
    AllUnequippedNftOf {
        owner: String,
    },
}
